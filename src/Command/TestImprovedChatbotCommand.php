<?php

namespace App\Command;

use App\Service\AiChatbotService;
use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Style\SymfonyStyle;

#[AsCommand(
    name: 'app:test-improved-chatbot',
    description: '–¢–µ—Å—Ç –Ω–∞ –ø–æ–¥–æ–±—Ä–µ–Ω–∏—è DeepSeek AI Chatbot',
)]
class TestImprovedChatbotCommand extends Command
{
    public function __construct(
        private AiChatbotService $aiChatbotService
    ) {
        parent::__construct();
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $io = new SymfonyStyle($input, $output);
        
        $io->title('üöÄ –¢–ï–°–¢ –ù–ê –ü–û–î–û–ë–†–ï–ù–ò–Ø DEEPSEEK AI CHATBOT');
        
        // Test cases to verify improvements
        $testCases = [
            [
                'message' => '–ö–∞–∫–≤–∏ –∏–Ω–¥—É—Å—Ç—Ä–∏–∞–ª–Ω–∏ –∏–º–æ—Ç–∏ –∏–º–∞—Ç–µ?',
                'description' => '–û–±—â –≤—ä–ø—Ä–æ—Å –∑–∞ —Ç–∏–ø–æ–≤–µ –∏–º–æ—Ç–∏'
            ],
            [
                'message' => '–ò–º–∞ –ª–∏ —Å–∫–ª–∞–¥–æ–≤–µ –≤ –°–æ—Ñ–∏—è?',
                'description' => '–ö–æ–Ω–∫—Ä–µ—Ç–µ–Ω —Ç–∏–ø + –ª–æ–∫–∞—Ü–∏—è'
            ],
            [
                'message' => '–¢—ä—Ä—Å—è –æ—Ñ–∏—Å –ø–æ–¥ –Ω–∞–µ–º –≤ –ü–ª–æ–≤–¥–∏–≤',
                'description' => '–ö–æ–º–±–∏–Ω–∏—Ä–∞–Ω —Ç—ä—Ä–≥–æ–≤—Å–∫–∏ –≤—ä–ø—Ä–æ—Å'
            ],
            [
                'message' => '–ò–º–∞—Ç–µ –ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–∏ —Å–≥—Ä–∞–¥–∏ –æ–∫–æ–ª–æ 1000 –∫–≤.–º?',
                'description' => '–¢–∏–ø + –ø–ª–æ—â'
            ],
            [
                'message' => '–ö–∞–∫–≤–∏ —Å–∞ –≤—ä–∑–º–æ–∂–Ω–æ—Å—Ç–∏—Ç–µ –∑–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏?',
                'description' => '–û–±—â –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–µ–Ω –≤—ä–ø—Ä–æ—Å'
            ],
            [
                'message' => '–ú–æ–∂–µ –ª–∏ –¥–∞ –≤–∏–¥—è –∏–º–æ—Ç–∏ –≤ –†—É—Å–µ?',
                'description' => '–õ–æ–∫–∞—Ü–∏—è —Ñ–æ–∫—É—Å'
            ]
        ];

        foreach ($testCases as $index => $testCase) {
            $io->section("–¢–µ—Å—Ç " . ($index + 1) . ": " . $testCase['description']);
            $io->text("–í—ä–ø—Ä–æ—Å: " . $testCase['message']);
            
            try {
                $response = $this->aiChatbotService->processMessage(
                    $testCase['message'],
                    'bg',
                    []
                );
                
                if ($response['success']) {
                    $io->success("‚úÖ –£—Å–ø–µ—à–µ–Ω –æ—Ç–≥–æ–≤–æ—Ä");
                    $io->block($response['response'], null, 'fg=green', ' ', true);
                    
                    if (!empty($response['suggestions'])) {
                        $io->text("üìù –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:");
                        foreach ($response['suggestions'] as $suggestion) {
                            $io->text("  ‚Ä¢ " . $suggestion);
                        }
                    }
                    
                    $io->text("üìä Provider: " . ($response['provider'] ?? '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'));
                    $io->text("üî¢ Tokens: " . ($response['tokens_used'] ?? 0));
                    
                } else {
                    $io->error("‚ùå –ì—Ä–µ—à–∫–∞ –≤ –æ—Ç–≥–æ–≤–æ—Ä–∞: " . ($response['error'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞ –≥—Ä–µ—à–∫–∞'));
                }
                
            } catch (\Exception $e) {
                $io->error("üí• Exception: " . $e->getMessage());
            }
            
            $io->newLine(2);
            
            // Small delay between requests
            sleep(2);
        }
        
        $io->success('üéâ –¢–µ—Å—Ç–≤–∞–Ω–µ—Ç–æ –∑–∞–≤—ä—Ä—à–µ–Ω–æ! –ü—Ä–æ–≤–µ—Ä–µ—Ç–µ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ –∏ consistency.');
        
        return Command::SUCCESS;
    }
} 