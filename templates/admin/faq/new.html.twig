{% extends 'admin/base.html.twig' %}

{% block title %}Нов въпрос{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .faq-form {
            max-width: 1200px;
            margin: 0 auto;
        }
        
        .form-section {
            background: #fff;
            border-radius: 0.5rem;
            box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
            padding: 1.5rem;
            margin-bottom: 1.5rem;
        }
        
        .form-section-title {
            color: #2c3e50;
            border-bottom: 2px solid #e9ecef;
            padding-bottom: 0.75rem;
            margin-bottom: 1.5rem;
        }
        
        .nav-tabs {
            border-bottom: 2px solid #e9ecef;
        }
        
        .nav-tabs .nav-link {
            border: none;
            color: #6c757d;
            padding: 0.75rem 1rem;
            margin-bottom: -2px;
        }
        
        .nav-tabs .nav-link.active {
            color: #2c3e50;
            border-bottom: 2px solid #3498db;
        }
        
        .form-control:focus {
            border-color: #3498db;
            box-shadow: 0 0 0 0.2rem rgba(52, 152, 219, 0.25);
        }
        
        .btn-primary {
            background-color: #3498db;
            border-color: #3498db;
        }
        
        .btn-primary:hover {
            background-color: #2980b9;
            border-color: #2980b9;
        }
        
        .form-check-input:checked {
            background-color: #3498db;
            border-color: #3498db;
        }
        
        .tab-content {
            padding: 1.5rem 0;
            background: transparent;
            border: none;
        }
    </style>
{% endblock %}

{% block body %}
<div class="container-fluid py-4">
    <div class="faq-form">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1 class="h3 mb-0">Нов въпрос</h1>
            <a href="{{ path('admin_faq_index') }}" class="btn btn-outline-secondary">
                <i class="bi bi-arrow-left"></i> Отказ
            </a>
        </div>

        {% for label, messages in app.flashes %}
            {% for message in messages %}
                <div class="alert alert-{{ label }} alert-dismissible fade show" role="alert">
                    {{ message }}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            {% endfor %}
        {% endfor %}

        {{ form_start(form, {'attr': {'class': 'needs-validation', 'novalidate': 'novalidate'}}) }}
            
            <!-- Основна информация -->
            <div class="form-section">
                <h4 class="form-section-title">
                    <i class="bi bi-info-circle"></i> Основна информация
                </h4>
                
                <div class="row g-3">
                    <div class="col-md-6">
                        {{ form_row(form.category) }}
                    </div>
                    <div class="col-md-6">
                        <div class="form-check mt-4">
                            {{ form_widget(form.isActive) }}
                            {{ form_label(form.isActive) }}
                        </div>
                    </div>
                </div>
            </div>

            <!-- Съдържание на различни езици -->
            <div class="form-section">
                <h4 class="form-section-title">
                    <i class="bi bi-translate"></i> Съдържание
                </h4>
                
                <!-- Alert container for translation messages -->
                <div id="alert-container"></div>
                
                <!-- Translation buttons -->
                <div class="translation-buttons mb-3">
                    <div class="d-flex gap-2 mb-3">
                        <button type="button" class="btn btn-success" id="translateAllBtn">
                            <i class="bi bi-translate"></i> Интелигентен превод на всички полета
                        </button>
                        <div class="btn-group">
                            <button type="button" class="btn btn-outline-primary" onclick="translateToLanguage('en')">
                                <i class="bi bi-globe"></i> Превод на EN
                            </button>
                            <button type="button" class="btn btn-outline-primary" onclick="translateToLanguage('de')">
                                <i class="bi bi-globe"></i> Превод на DE
                            </button>
                            <button type="button" class="btn btn-outline-primary" onclick="translateToLanguage('ru')">
                                <i class="bi bi-globe"></i> Превод на RU
                            </button>
                        </div>
                    </div>
                    
                    <!-- Translation progress -->
                    <div id="translation-progress" class="mb-3" style="display: none;">
                        <div class="progress">
                            <div id="translation-progress-bar" class="progress-bar progress-bar-striped progress-bar-animated" 
                                 role="progressbar" style="width: 0%" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">
                            </div>
                        </div>
                        <small id="translation-progress-text" class="text-muted">Превод: 0 от 0 (0%)</small>
                    </div>
                </div>
                
                <ul class="nav nav-tabs mb-4" role="tablist">
                    <li class="nav-item">
                        <a class="nav-link active" data-bs-toggle="tab" href="#bulgarian">
                            <i class="bi bi-globe"></i> Български
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" data-bs-toggle="tab" href="#english">
                            <i class="bi bi-globe"></i> English
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" data-bs-toggle="tab" href="#german">
                            <i class="bi bi-globe"></i> Deutsch
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" data-bs-toggle="tab" href="#russian">
                            <i class="bi bi-globe"></i> Русский
                        </a>
                    </li>
                </ul>

                <div class="tab-content">
                    <!-- Български -->
                    <div class="tab-pane fade show active" id="bulgarian">
                        {{ form_row(form.questionBg) }}
                        {{ form_row(form.answerBg) }}
                    </div>

                    <!-- English -->
                    <div class="tab-pane fade" id="english">
                        {{ form_row(form.questionEn) }}
                        {{ form_row(form.answerEn) }}
                    </div>

                    <!-- Deutsch -->
                    <div class="tab-pane fade" id="german">
                        {{ form_row(form.questionDe) }}
                        {{ form_row(form.answerDe) }}
                    </div>

                    <!-- Русский -->
                    <div class="tab-pane fade" id="russian">
                        {{ form_row(form.questionRu) }}
                        {{ form_row(form.answerRu) }}
                    </div>
                </div>
            </div>

            <!-- Бутони -->
            <div class="d-flex justify-content-end gap-2 mb-4">
                <a href="{{ path('admin_faq_index') }}" class="btn btn-outline-secondary">
                    <i class="bi bi-x"></i> Отказ
                </a>
                <button type="submit" class="btn btn-primary">
                    <i class="bi bi-check-lg"></i> Създай
                </button>
            </div>

        {{ form_end(form) }}
    </div>
</div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://cdn.jsdelivr.net/npm/@ckeditor/ckeditor5-build-classic/build/ckeditor.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Инициализация на CKEditor
            document.querySelectorAll('.ckeditor').forEach(function(element) {
                ClassicEditor
                    .create(element, {
                        toolbar: [
                            'heading',
                            '|',
                            'bold',
                            'italic',
                            'link',
                            'bulletedList',
                            'numberedList',
                            'blockQuote',
                            '|',
                            'undo',
                            'redo'
                        ],
                        heading: {
                            options: [
                                { model: 'paragraph', title: 'Paragraph', class: 'ck-heading_paragraph' },
                                { model: 'heading2', view: 'h2', title: 'Heading 2', class: 'ck-heading_heading2' },
                                { model: 'heading3', view: 'h3', title: 'Heading 3', class: 'ck-heading_heading3' }
                            ]
                        },
                        licenseKey: '0',
                    })
                    .then(editor => {
                        // Store editor reference for translation functions
                        const fieldId = element.id.replace('faq_', ''); // Remove 'faq_' prefix
                        window[`editor_${fieldId}`] = editor;
                    })
                    .catch(error => {
                        console.error(error);
                    });
            });

            // Валидация на формата
            const form = document.querySelector('form');
            form.addEventListener('submit', function(event) {
                if (!form.checkValidity()) {
                    event.preventDefault();
                    event.stopPropagation();
                }
                form.classList.add('was-validated');
            });

            // Translation service and functions
            const translationService = {
                async translate(text, sourceLang, targetLang, domain = 'general') {
                    const response = await fetch('/admin/translate', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest'
                        },
                        body: JSON.stringify({
                            text: text,
                            source: sourceLang,
                            target: targetLang,
                            context: domain
                        })
                    });
                    
                    if (!response.ok) {
                        throw new Error(`Translation failed: ${response.statusText}`);
                    }
                    
                    const data = await response.json();
                    if (data.error) {
                        throw new Error(data.error);
                    }
                    
                    return data.translatedText;
                }
            };

            // Get field content for a specific language
            function getFieldContent(field, lang) {
                const langSuffix = lang.charAt(0).toUpperCase() + lang.slice(1);
                if (field === 'answer') {
                    // For CKEditor fields, check if editor exists
                    const editorKey = `editor_${field}${langSuffix}`;
                    if (window[editorKey]) {
                        return window[editorKey].getData().trim();
                    }
                    // Fallback to textarea
                    const element = document.querySelector(`#faq_${field}${langSuffix}`);
                    return element ? element.value.trim() : '';
                } else {
                    const element = document.querySelector(`#faq_${field}${langSuffix}`);
                    return element ? element.value.trim() : '';
                }
            }

            // Set field content for a specific language
            function setFieldContent(field, lang, content) {
                const langSuffix = lang.charAt(0).toUpperCase() + lang.slice(1);
                if (field === 'answer') {
                    // For CKEditor fields
                    const editorKey = `editor_${field}${langSuffix}`;
                    if (window[editorKey]) {
                        window[editorKey].setData(content);
                        return;
                    }
                    // Fallback to textarea
                    const element = document.querySelector(`#faq_${field}${langSuffix}`);
                    if (element) {
                        element.value = content;
                    }
                } else {
                    const element = document.querySelector(`#faq_${field}${langSuffix}`);
                    if (element) {
                        element.value = content;
                    }
                }
            }

            // Detect source language with most content
            function detectSourceLanguage() {
                const languages = ['bg', 'en', 'de', 'ru'];
                const fields = ['question', 'answer'];
                const languageContent = {};
                
                languages.forEach(lang => {
                    languageContent[lang] = 0;
                    fields.forEach(field => {
                        const content = getFieldContent(field, lang);
                        languageContent[lang] += content.length;
                    });
                });
                
                // Find language with most content
                let maxContent = 0;
                let sourceLang = 'bg'; // default to Bulgarian
                
                Object.keys(languageContent).forEach(lang => {
                    if (languageContent[lang] > maxContent) {
                        maxContent = languageContent[lang];
                        sourceLang = lang;
                    }
                });
                
                return { sourceLang, contentLengths: languageContent };
            }

            // Show alert message
            function showAlert(message, type = 'info') {
                const alertHtml = `
                    <div class="alert alert-${type} alert-dismissible fade show" role="alert">
                        ${message}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                `;
                
                const alertContainer = document.getElementById('alert-container');
                if (alertContainer) {
                    alertContainer.innerHTML = alertHtml;
                    // Auto-hide after 5 seconds
                    setTimeout(() => {
                        const alert = alertContainer.querySelector('.alert');
                        if (alert) {
                            const bsAlert = new bootstrap.Alert(alert);
                            bsAlert.close();
                        }
                    }, 5000);
                }
            }

            // Show translation progress
            function showTranslationProgress(current, total) {
                const percentage = Math.round((current / total) * 100);
                const progressContainer = document.getElementById('translation-progress');
                const progressBar = document.getElementById('translation-progress-bar');
                const progressText = document.getElementById('translation-progress-text');
                
                if (progressContainer && progressBar && progressText) {
                    progressContainer.style.display = 'block';
                    progressBar.style.width = percentage + '%';
                    progressBar.setAttribute('aria-valuenow', percentage);
                    progressText.textContent = `Превод: ${current} от ${total} (${percentage}%)`;
                }
            }

            // Hide translation progress
            function hideTranslationProgress() {
                const progressContainer = document.getElementById('translation-progress');
                if (progressContainer) {
                    progressContainer.style.display = 'none';
                }
            }

            // Translate all fields intelligently
            async function translateAllFromBulgarian() {
                const detection = detectSourceLanguage();
                const sourceLang = detection.sourceLang;
                const languageNames = {
                    'bg': 'български',
                    'en': 'английски', 
                    'de': 'немски',
                    'ru': 'руски'
                };
                
                // Check if any content exists
                if (detection.contentLengths[sourceLang] === 0) {
                    showAlert('Моля, въведете съдържание на някой от езиците преди да превеждате.', 'warning');
                    return;
                }
                
                console.log('Detected source language:', sourceLang, 'with', detection.contentLengths[sourceLang], 'characters');
                
                const allLanguages = ['bg', 'en', 'de', 'ru'];
                const targetLanguages = allLanguages.filter(lang => lang !== sourceLang);
                const fields = ['question', 'answer'];
                
                // Collect only fields that have content in source language and are empty in target languages
                const translationsNeeded = [];
                
                fields.forEach(field => {
                    const sourceContent = getFieldContent(field, sourceLang);
                    if (sourceContent) {
                        targetLanguages.forEach(targetLang => {
                            const targetContent = getFieldContent(field, targetLang);
                            if (!targetContent) { // Only translate to empty fields
                                translationsNeeded.push({
                                    field: field,
                                    text: sourceContent,
                                    sourceLang: sourceLang,
                                    targetLang: targetLang
                                });
                            }
                        });
                    }
                });
                
                if (translationsNeeded.length === 0) {
                    showAlert('Всички полета вече са попълнени. Няма нужда от превод.', 'info');
                    return;
                }
                
                showAlert(`Открит е ${languageNames[sourceLang]} като основен език. Започвам превод...`, 'info');
                showTranslationProgress(0, translationsNeeded.length);
                
                let completedTranslations = 0;
                
                try {
                    for (const translation of translationsNeeded) {
                        try {
                            const translatedText = await translationService.translate(
                                translation.text, 
                                translation.sourceLang, 
                                translation.targetLang, 
                                'faq'
                            );
                            
                            setFieldContent(translation.field, translation.targetLang, translatedText);
                            
                            completedTranslations++;
                            showTranslationProgress(completedTranslations, translationsNeeded.length);
                            
                            // Small delay to prevent API rate limiting
                            await new Promise(resolve => setTimeout(resolve, 300));
                            
                        } catch (error) {
                            console.error(`Error translating ${translation.field} from ${translation.sourceLang} to ${translation.targetLang}:`, error);
                            completedTranslations++;
                            showTranslationProgress(completedTranslations, translationsNeeded.length);
                        }
                    }
                    
                    hideTranslationProgress();
                    showAlert(`Преводът е завършен успешно! Преведени са ${translationsNeeded.length} полета от ${languageNames[sourceLang]}.`, 'success');
                    
                } catch (error) {
                    hideTranslationProgress();
                    showAlert(`Грешка при превода: ${error.message}`, 'danger');
                }
            }

            // Translate to specific language
            async function translateToLanguage(targetLang) {
                const detection = detectSourceLanguage();
                const sourceLang = detection.sourceLang;
                const languageNames = {
                    'bg': 'български',
                    'en': 'английски', 
                    'de': 'немски',
                    'ru': 'руски'
                };
                
                if (detection.contentLengths[sourceLang] === 0) {
                    showAlert('Моля, въведете съдържание на някой от езиците преди да превеждате.', 'warning');
                    return;
                }
                
                if (sourceLang === targetLang) {
                    showAlert(`Основният език вече е ${languageNames[targetLang]}.`, 'info');
                    return;
                }
                
                const fields = ['question', 'answer'];
                const translationsNeeded = [];
                
                fields.forEach(field => {
                    const sourceContent = getFieldContent(field, sourceLang);
                    if (sourceContent) {
                        const targetContent = getFieldContent(field, targetLang);
                        if (!targetContent) { // Only translate to empty fields
                            translationsNeeded.push({
                                field: field,
                                text: sourceContent,
                                sourceLang: sourceLang,
                                targetLang: targetLang
                            });
                        }
                    }
                });
                
                if (translationsNeeded.length === 0) {
                    showAlert(`Всички полета на ${languageNames[targetLang]} вече са попълнени.`, 'info');
                    return;
                }
                
                showAlert(`Започвам превод от ${languageNames[sourceLang]} към ${languageNames[targetLang]}...`, 'info');
                showTranslationProgress(0, translationsNeeded.length);
                
                let completedTranslations = 0;
                
                try {
                    for (const translation of translationsNeeded) {
                        try {
                            const translatedText = await translationService.translate(
                                translation.text, 
                                translation.sourceLang, 
                                translation.targetLang, 
                                'faq'
                            );
                            
                            setFieldContent(translation.field, translation.targetLang, translatedText);
                            
                            completedTranslations++;
                            showTranslationProgress(completedTranslations, translationsNeeded.length);
                            
                            // Small delay to prevent API rate limiting
                            await new Promise(resolve => setTimeout(resolve, 300));
                            
                        } catch (error) {
                            console.error(`Error translating ${translation.field}:`, error);
                            completedTranslations++;
                            showTranslationProgress(completedTranslations, translationsNeeded.length);
                        }
                    }
                    
                    hideTranslationProgress();
                    showAlert(`Преводът към ${languageNames[targetLang]} е завършен успешно!`, 'success');
                    
                } catch (error) {
                    hideTranslationProgress();
                    showAlert(`Грешка при превода: ${error.message}`, 'danger');
                }
            }

            // Initialize translation button
            const translateAllBtn = document.getElementById('translateAllBtn');
            if (translateAllBtn) {
                translateAllBtn.addEventListener('click', translateAllFromBulgarian);
            }

            // Make functions globally accessible
            window.translateToLanguage = translateToLanguage;
        });
    </script>
{% endblock %} 